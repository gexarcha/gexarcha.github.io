<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Georgios Exarchakis</title><link>https://exarchakis.net/post/</link><atom:link href="https://exarchakis.net/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2018</copyright><lastBuildDate>Tue, 02 Apr 2019 13:37:24 +0200</lastBuildDate><image><url>https://exarchakis.net/media/George%20Exarchakis.jpg</url><title>Posts</title><link>https://exarchakis.net/post/</link></image><item><title>Kymatio</title><link>https://exarchakis.net/post/kymatio/</link><pubDate>Tue, 02 Apr 2019 13:37:24 +0200</pubDate><guid>https://exarchakis.net/post/kymatio/</guid><description>&lt;p>&lt;a href="https://kymat.io" target="_blank" rel="noopener">Kymatio&lt;/a> is a Python module for computing wavelet and scattering transforms.&lt;/p>
&lt;p>It is built on top of PyTorch, but also has a fast CUDA backend via cupy and skcuda.&lt;/p>
&lt;p>Use kymatio if you need a library that:&lt;/p>
&lt;ul>
&lt;li>integrates wavelet scattering in a deep learning architecture,&lt;/li>
&lt;li>supports 1-D, 2-D, and 3-D wavelets, and runs seamlessly on CPU and GPU hardware.&lt;/li>
&lt;li>A brief intro to wavelet scattering is provided in User Guide. For a list of publications see Publications.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>In the Python intepreter, you may then call:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> kymatio&lt;/code>&lt;/pre>&lt;/div>
&lt;p>which should run without error if the package has been correctly installed.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> torch
&lt;span style="color:#f92672">from&lt;/span> kymatio &lt;span style="color:#f92672">import&lt;/span> Scattering2D
scattering &lt;span style="color:#f92672">=&lt;/span> Scattering2D(J&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, shape&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>))
x &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>randn(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>)
Sx &lt;span style="color:#f92672">=&lt;/span> scattering(x)
&lt;span style="color:#66d9ef">print&lt;/span>(Sx&lt;span style="color:#f92672">.&lt;/span>size())&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This should output:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">torch&lt;span style="color:#f92672">.&lt;/span>Size([&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">81&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>])&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This corresponds to 81 scattering coefficients, each corresponding to an 8x8 image.&lt;/p>
&lt;p>Check out the &lt;a href="https://www.kymat.io/userguide.html#user-guide" target="_blank" rel="noopener">User Guide&lt;/a> for more scattering transform examples.&lt;/p></description></item></channel></rss>